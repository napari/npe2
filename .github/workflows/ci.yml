name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request: {}
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]
        platform: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs,testing]

      - name: Test Main docs build
        run: pytest --color yes -m github_main_only
      - name: Test
        run: pytest --color yes --cov npe2 --cov-report xml --cov-report term-missing

      - name: Coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true

  test_napari:
    name: napari tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: napari/napari
          path: napari-from-github
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ./napari-from-github
          python -m pip install -e .
          # bare minimum required to test napari/plugins
          python -m pip install pytest scikit-image[data] zarr xarray hypothesis matplotlib

      - name: Run napari plugin headless tests
        run: pytest -W 'ignore::DeprecationWarning' napari/plugins napari/settings napari/layers napari/components
        working-directory: napari-from-github

  deploy:
    name: Deploy
    needs: test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip
          pip install -U twine build
          python -m build .
          twine check dist/*
          ls -lh dist

      - name: write schema
        run: |
          pip install -e .
          python -m npe2.manifest.schema > schema.json

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}

      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: schema.json
