name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request: {}
  workflow_dispatch:

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-manifest:
    name: Check Manifest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Check
        run: pipx run check-manifest

  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }}) ${{ matrix.pydantic }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
        platform: [ubuntu-latest, macos-latest, windows-latest]
        pydantic: ["pydantic<2", "pydantic>2"]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "${{ matrix.pydantic }}"
          pip install -e .[json,docs,testing]

      - name: Test Main docs build
        run: pytest --color yes -m github_main_only
      - name: Test
        run: |
          coverage run --source=npe2 -m pytest --color yes

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage reports ${{ matrix.platform }} py ${{ matrix.python-version }} ${{ (matrix.pydantic == 'pydantic<2' && 'pydantic_lt_2') || 'pydantic_gt_2' }}
          path: |
            ./.coverage.*
          include-hidden-files: true

  test_napari:
    name: napari tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: napari/napari
          path: napari-from-github
          fetch-depth: 0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.10"
      - name: Install
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ./napari-from-github -c "./napari-from-github/resources/constraints/constraints_py3.10.txt"
          python -m pip install -e .[json]
          # bare minimum required to test napari/plugins
          python -m pip install pytest pytest-pretty scikit-image[data] zarr xarray hypothesis matplotlib

      - name: Run napari plugin headless tests
        run: pytest -W 'ignore::DeprecationWarning' src/napari/plugins src/napari/settings src/napari/layers src/napari/components
        working-directory: napari-from-github

  test_docs_render:
    name: docs render
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"
      - name: Build schema
        run: |
          python -m pip install --upgrade pip
          pip install -e .[docs] check-jsonschema
          python -m npe2.manifest.schema > _schema.json
          check-jsonschema --check-metaschema _schema.json
      - name: Test rendering docs
        run: python _docs/render.py
        env:
          NPE2_SCHEMA: "_schema.json"
      - name: Build jupyter book
        # install dependencies, generate toc, then build
        run: |
          pip install jupyter-book sphinx-tabs furo
          cd docs
          jupyter-book toc from-project . -f jb-book > _toc.yml
          jupyter-book build .
      # Upload the book's HTML as an artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1
        with:
          path: "docs/_build/html"

  upload_coverage:
    needs: test
    name: Upload coverage
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"
          cache-dependency-path: setup.cfg
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install codecov

      - name: Download coverage data
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: coverage reports*
          path: coverage
          merge-multiple: true

      - name: combine coverage data
        run: |
          python -Im coverage combine coverage
          python -Im coverage xml -o coverage.xml

          # Report and write to summary.
          python -Im coverage report --format=markdown --skip-empty --skip-covered >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage data
        uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"

      - name: install
        run: |
          git tag
          pip install -U pip
          pip install -U twine build
          python -m build .
          twine check dist/*
          ls -lh dist

      - name: write schema
        run: |
          pip install -e . check-jsonschema
          python -m npe2.manifest.schema > schema.json
          check-jsonschema --check-metaschema schema.json

      - name: Build and publish
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}

      - uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: schema.json
