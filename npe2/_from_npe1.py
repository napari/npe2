# type: ignore
# flake8: noqa
from napari_plugin_engine import PluginManager, napari_hook_specification


# fmt: off
class HookSpecs:
    def napari_provide_sample_data(): ...
    def napari_get_reader(path): ...
    def napari_get_writer(path, layer_types): ...
    def napari_write_image(path, data, meta): ...
    def napari_write_labels(path, data, meta): ...
    def napari_write_points(path, data, meta): ...
    def napari_write_shapes(path, data, meta): ...
    def napari_write_surface(path, data, meta): ...
    def napari_write_vectors(path, data, meta): ...
    def napari_experimental_provide_function(): ...
    def napari_experimental_provide_dock_widget(): ...
    def napari_experimental_provide_theme(): ...
# fmt: on
for name in dir(HookSpecs):
    if name.startswith("napari"):
        setattr(HookSpecs, name, napari_hook_specification(getattr(HookSpecs, name)))


_PM = None


def npe1_plugin_manager():
    global _PM
    if _PM is None:
        _PM = PluginManager("napari", discover_entry_point="napari.plugin")
        _PM.add_hookspecs(HookSpecs)
        _PM.discover()
    return _PM
