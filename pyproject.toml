# pyproject.toml
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

# https://peps.python.org/pep-0621/
[project]
name = "npe2"
dynamic = ["version"]
description = "napari plugin engine v2"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD-3-Clause" }
authors = [
    { name = "Talley Lambert", email = "talley.lambert@gmail.com" },
    { name = "Nathan Clack" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Typing :: Typed",
]
dependencies = [
    "PyYAML",
    "appdirs",
    "build>=1",
    "psygnal>=0.3.0",
    "pydantic",
    "tomli-w",
    "tomli; python_version < '3.11'",
    "rich",
    "typer",
]

[project.urls]
homepage = "https://github.com/napari/npe2"
repository = "https://github.com/napari/npe2"

# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
testing = [
    "magicgui",
    "napari-plugin-engine",
    "napari-svg==0.1.5",
    "numpy",
    "pytest",
    "pytest-cov",
    "jsonschema",
    "pytest-pretty",
]
dev = ["black", "ipython", "isort", "mypy", "pre-commit"]
docs = ["Jinja2", "magicgui>=0.3.3"]
json = ["jsonschema"]

# Entry points
# https://peps.python.org/pep-0621/#entry-points
# same as console_scripts entry point
[project.scripts]
npe2 = "npe2.cli:main"

[project.entry-points."distutils.commands"]
npe2_compile = "npe2._setuptools_plugin:npe2_compile"

[project.entry-points."pytest11"]
npe2 = "npe2._pytest_plugin"

[project.entry-points."setuptools.finalize_distribution_options"]
finalize_npe2 = "npe2._setuptools_plugin:finalize_npe2"


[tool.check-manifest]
ignore = []

[tool.pytest.ini_options]
filterwarnings = ["error:::npe2"]
addopts = "-m 'not github_main_only'"
markers = [
    "github_main_only: Test to run only on github main (verify it does not break latest napari docs build)",
]

[tool.black]
target-version = ['py38', 'py39', 'py310']
line-length = 88

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
fix = true
src = ["src/npe2", "tests"]
select = [
    "E",
    "F",
    "W",   #flake8
    "UP",  # pyupgrade
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "TID", # flake8-tidy-imports
    "RUF", # ruff-specific rules
]

[tool.ruff.per-file-ignores]
"src/npe2/cli.py" = ["B008", "A00"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.isort]
known-first-party = ['npe2']

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/*.py"
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
implicit_reexport = false
show_column_numbers = true
ignore_missing_imports = true
show_error_codes = true
pretty = true


[tool.coverage.run]
source = ["src"]
omit = [
    "src/npe2/manifest/contributions/_keybindings.py",
    "src/npe2/manifest/menus.py",
    "src/npe2/__main__.py",
    "src/npe2/manifest/package_metadata.py",
    # due to all of the isolated sub-environments and sub-processes,
    # it's really hard to get coverage on the setuptools plugin.
    "src/npe2/_setuptools_plugin.py",
]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "@overload",
    "@abstractmethod",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
